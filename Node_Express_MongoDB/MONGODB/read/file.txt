*DEFINATION:
In MongoDB, "read" refers to the operation of retrieving documents from a collection. 
This involves querying the database to find documents that match specific criteria and returning them to the client application.

1. db.collection.find():-> "array/empty array"
* The primary method for performing read operations is db.collection.find().
* It allows you to specify query filters and criteria to select the desired documents.
* You can also use query modifiers to control aspects like the number of results returned, sorting order, and projection (which fields to include or exclude).

EX,
db.products.find({ category: "electronics", price: { $gt: 100 } }) 

This query retrieves all documents from the products collection where the category is "electronics" and the price is greater than 100.

2. Read Preference:
* In a replica set, read preference dictates which member (primary or secondary) a client routes its read operations to.
* primary (default): Reads are directed to the primary member, ensuring the most up-to-date data.
* primaryPreferred: Reads prefer the primary but can fall back to secondaries if the primary is unavailable.
* secondary: Reads are directed to secondary members, offering improved read scalability and potentially lower latency for geographically distributed applications, but with the possibility of reading slightly stale data due to replication lag.
* secondaryPreferred: Reads prefer secondaries but can fall back to the primary if no secondaries are available.
* nearest: Reads are directed to the member with the lowest network latency to the client.

3. Read Concern:
* Read concern determines the level of data consistency guaranteed for a read operation.
* local: Returns data from the local member, regardless of whether it's been replicated to other members.
* majority: Returns data that has been acknowledged by a majority of the replica set members, ensuring higher data durability.
* linearizable: Provides the strongest consistency guarantee, ensuring that reads reflect a causally consistent view of the data.

4. Explain Plans:
* The explain() method can be used with read operations to understand how MongoDB executes a query.
* It provides detailed information about the query plan, including index usage, scan types, and execution statistics, which helps in optimizing query performance.
EX,
db.products.find({ category: "electronics" }).explain("executionStats")

5. Iterating Results:
* Read operations often return a cursor, which is an iterable object allowing you to process the retrieved documents one by one or in batches.
* Drivers provide methods to iterate over the cursor and access the document data.

6.oprators

db.collection.find({ _id : value }) - [object] / []

db.collection.find({ _id : value , name : certain_name }) - [object] / []

condition && condition -> [object]/[]

oprators

$lt - less than
$gt - greater than
$lte - less than equals to
$gte -  greater than equals to
$ne - not equals to
$eq - equals to
$in - in[range]
$nin - not in[range]

{ _id:{$lte : 10}}

db.techs.find({ _id : {$in : [1,5,10]}}) -> will return objects with id [1,5,10]
db.techs.find({ _id : {$nin : [1,5,10]}})-> will return all objects except the one with id [1,5,10]

db.techs.find(
    { 
        _id : {
            $in : [1,5,10]
        }
    }
)